class Solution {
public:
    /*void print (vector<vector<char>> &grid) {
        int n = grid.size();
        int m = grid[0].size();
        for ( int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cout << grid[i][j] << ' ';
            }
            cout << endl;
        }*/
    //}
    void traverse (vector<vector<char>> &grid, int i, int j, int n, int m) {
        if ((i < n && j < m && i >= 0 && j >= 0) && grid[i][j] != '0') {
            //cout << "i " << i << " j " << j << endl << endl;
            //print (grid);
            grid[i][j] = '0';
            traverse(grid, i, j+1, n, m);
            traverse(grid, i-1, j, n, m);
            traverse(grid, i+1, j, n, m);
            traverse(grid, i, j-1, n, m);
            //traverse(grid, i, j + 1);
            //traverse(grid, i, j - 1);
        }
    }
    int numIslands(vector<vector<char>> &grid) {
        int count = 0;
        int n = grid.size();
        if (n != 0) {
        
            int m = grid[0].size();
            for ( int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] == '1') {
                        count += 1;
                        traverse(grid,i, j, n, m);
                        //print(grid);
                    }
                }
            }
        }
        return count;
    }
};