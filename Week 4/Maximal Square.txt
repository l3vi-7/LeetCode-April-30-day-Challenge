class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        if(m==0)
            return 0;
        int n = matrix[0].size();
        if (n==0)
            return 0;
        int maxF = 0;
        vector<vector<int>> dp (m + 1, vector<int> (n + 1, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    int max1 = min(dp[i][j], dp[i + 1][j]);
                    int max2 = min(max1, dp[i][j + 1]);
                    dp [i + 1][j + 1] = max2 + 1;
                    maxF = max(dp[i + 1][j + 1], maxF);
                }
            }
        }
        
        /*for (auto i : dp) {
            for (auto j : i) {
                cout << j << " ";
            }
            cout << endl;
        }*/
        
        return maxF* maxF;
    }
};