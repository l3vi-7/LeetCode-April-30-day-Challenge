
------------------------------Final Approach------------------------------------------

class Solution {
public:
    bool canJump(vector<int>& nums) {
        ios::sync_with_stdio(false); std::cin.tie(nullptr);                   
        std::cout.tie(nullptr);
        int len = nums.size() - 1;
        for (int i = nums.size() - 1; i >= 0; i--) {
            //cout << i << " i " << endl;
            if (i + nums[i] >= len) {
            //cout << i + nums[i] << " i + nums[i]" << endl;
                len = i;
            }
        }
        return len == 0;
    }
};


---------------------------Initial Approach--------------------------------------------

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int lastPos = nums.size() - 1;
        for (int i = nums.size() - 1; i >= 0; i--) {
            if (i + nums[i] >= lastPos) {
                lastPos = i;
            }
        }
        return lastPos == 0;
    }
};